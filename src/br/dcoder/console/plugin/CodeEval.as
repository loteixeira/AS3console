// AS3Console Copyright 2012 Lucas Teixeira (aka Disturbed Coder)
// Project page: https://github.com/loteixeira/as3console
//
// This software is distribuited under the terms of the GNU Lesser Public License.
// See license.txt for more information.

package br.dcoder.console.plugin
{
	import com.hurlant.eval.CompiledESC;
	import com.hurlant.eval.ByteLoader;
	
	import flash.display.Loader;
	import flash.events.Event;
	import flash.utils.ByteArray;
	import flash.utils.getDefinitionByName;

	/**
	 * Plugin to run Actionscript3 code in AS3console. 
	 */
	public class CodeEval extends ConsolePlugin
	{
		private var _context:Object;
		private var esc:CompiledESC = new CompiledESC();
		
		/**
		 * Start CodeEval plugin. Using this plugin every time you type "eval [source code]" in console input text field,
		 * [source code] block will be compiled to AVM2 bytecode and executed.
		 * Generated byte code runs from inside a function, where receive two parameters:<br>
		 * <li>getDef:Function -> alias for flash.utils.getDefinitionByName</li>
		 * <li>context:Object -> context object</li>
		 * @param context An acessible oobject for evaluated source code
		 */
		public function CodeEval(_context:Object = null):void
		{
			super("CodeEval", "Evaluates AS3 code in AS3console. Usage: eval [source code]");
			this._context = _context;
		}
		
		/**
		 * Context object getter and setter.
		 */
		public function get context():Object
		{
			return _context;
		}
		
		public function set context(_context:Object):void
		{
			this._context = _context;
		}

		/**
		 * @private
		 */
		override protected function input(data:String):Boolean
		{
			if (data.indexOf("eval ") == 0)
			{
				var src:String = "function evalCode(getDef:Function, context:Object):void { " + data.substr(5) + " }";
				var swf:ByteArray = ByteLoader.wrapInSWF([ esc.eval(src) ]);
				var loader:Loader = new Loader();

				loader.contentLoaderInfo.addEventListener(Event.INIT, function(event:Event):void
				{
					try
					{
						var getDef:Function = function(expression:String):* { return getDefinitionByName(expression); };
						loader.contentLoaderInfo.applicationDomain.getDefinition("evalCode")(getDef, _context);
					}
					catch (e:Error)
					{
						cpln("Error executing code:");
						cpln(e);
					}
				});
			
				loader.loadBytes(swf);
				return true;
			}
			
			return false;
		}
	}
}
